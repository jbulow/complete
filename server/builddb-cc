#!/usr/bin/env python

"""A CC replacement that forwards calls to a real CC after writing information
about input and output files to a sqlite database. Also stores wall time of the
real CC invocation.

Use e.g. like this:
  # Required.
  export SOURCE_ROOT=$(pwd)

  # Optional, defaults to "clang++'.
  # If clang++ is not in your $PATH, make this absolute.
  export CLANG_CC=/Users/thakis/src/llvm-rw/Release+Asserts/bin/clang++

  # Optional, defaults to "builddb.sqlite".
  # If relative, it's relative to $SOURCE_ROOT.
  export BUILDDB=builddb.sqlite

  cd base

  # This tool does not support incremental rebuils, so blow away everything
  # before you use it:
  rm -rf ../clang && rm ../builddb.sqlite

  xcodebuild \
      OBJROOT=$SOURCE_ROOT/clang/obj \
      DSTROOT=$SOURCE_ROOT/clang \
      SYMROOT=$SOURCE_ROOT/clang \
      CC=/Users/thakis/src/complete/server/builddb-cc 

  # Optional: Create a tags file:
  cd $SOURCE_ROOT
  /Users/thakis/src/complete/server/tags.py ${BUILDDB:-builddb.sqlite} > tags

Uses (some of them easily possible with the make build, but I'm stuck with
xcodebuild):
* Given a file, return the build command for that file
* Find the 50 slowest build commands
* Directory build-time treemap (maybe weighted by 1/#files_in_dir)

Some of this can also be done by writing a custom gyp output generator, which
might be cleaner, and which certainly is faster.
"""

import os
import pipes
import sqlite3
import subprocess
import sys
import time


def FindOutput(args, source_root):
  for i, arg in enumerate(args):
    if arg == '-o' and i + 1 < len(args):
      return os.path.relpath(os.path.realpath(args[i + 1]), source_root)
  return None


def FindInput(args, output, source_root):
  if not output.endswith('.o'):
    return None
  output = os.path.basename(output)[:-2]  # strip '.o'
  for i, arg in enumerate(args):
    if arg.find(output) != -1:
      if args[i - 1] == '-c':
        # TODO(thakis): This does not always match the path the plugin uses :-/
        return os.path.relpath(os.path.realpath(arg), source_root)
      elif os.path.splitext(arg)[1] in ['.c', '.cpp', '.cc', '.m', '.mm']:
        return arg
  return None


def PrepareTables(db):
  db.execute('create table if not exists filenames(name, basename)')
  db.execute(
      'create index if not exists filename_name_idx on filenames(name)')
  db.execute(
      'create index if not exists filename_basename_idx on filenames(basename)')

  db.execute('''
      create table if not exists gcc_build_commands(
          filename_input_id integer,
          cwd,
          command,
          output_file_name,
          exit_code integer,
          duration real)
  ''')


def GetFileId(db, name):
  cursor = db.execute('select rowid from filenames where name="%s"' % name)
  result = cursor.fetchone()
  if not result:
    cursor = db.execute(
        'insert into filenames (name, basename) values (?, ?)',
        (name, os.path.basename(name)))
    return cursor.lastrowid
  else:
    return result[0]


def LogInvocationToDb(
    db, cmd_list, duration, exit_code, in_file_id, cc_output, source_root):
  # TODO(thakis): Make sure no row exists for this output file?
  db.execute('''
      insert into gcc_build_commands(
          filename_input_id,
          cwd,
          command,
          output_file_name,
          exit_code,
          duration)
      values (?, ?, ?, ?, ?, ?)
  ''', (in_file_id,
        os.path.relpath(os.getcwd(), source_root),
        ' '.join([pipes.quote(c) for c in cmd_list]),
        cc_output,
        exit_code,
        duration
       ))


def LogInvocation(cmd_list, duration, exit_code, db_path, source_root):
  cc_output = FindOutput(cmd_list, source_root)
  cc_input = None
  if cc_output:
    cc_input = FindInput(cmd_list, cc_output, source_root)

  with sqlite3.connect(db_path, isolation_level=None) as db:
    db.execute('pragma synchronous = off')
    db.execute('pragma journal_mode = memory')
    PrepareTables(db)
    db.execute('begin exclusive transaction')
    file_id = 0
    if cc_input:
      file_id = GetFileId(db, cc_input)
    LogInvocationToDb(
        db, cmd_list, duration, exit_code, file_id, cc_output, source_root)
    db.execute('end transaction')


if __name__ == '__main__':
  # Find plugin.
  soname = 'libcomplete_plugin.dylib'  # TODO(thakis): Linux.

  plugin = os.path.join(os.path.dirname(sys.argv[0]), soname)
  if not os.path.isfile(plugin):
    print "'%s' does not exist. Please compile it." % plugin
    sys.exit(1)

  # Parse environment variables.
  if not 'SOURCE_ROOT' in os.environ:
    print ('You have to set the environment variable SOURCE_ROOT to the '
           'root directory of your source code.')
    sys.exit(1)
  source_root = os.environ['SOURCE_ROOT']
  if not os.path.isabs(source_root):
    print '$SOURCE_ROOT has to be an absolute path'
    sys.exit(1)
  source_root = os.path.realpath(source_root)
  if source_root[-1] != '/':
    source_root += '/'

  clang = 'clang++'
  if 'CLANG_CC' in os.environ:
    clang = os.environ['CLANG_CC']

  db_path = 'builddb.sqlite'
  if 'BUILDDB' in os.environ:
    db_path = os.environ['BUILDDB']
  if not os.path.isabs(db_path):
    db_path = os.path.join(source_root, db_path)
  db_path = os.path.realpath(db_path)

  # Call clang.
  # TODO(thakis): Maybe store svn rev in DB and error out if current revision
  #               doesn't match db revision.
  command = [clang] + sys.argv[1:]
  command.extend(['-Xclang', '-load', '-Xclang', plugin,
                  '-Xclang', '-add-plugin', '-Xclang', 'complete',
                  '-Xclang', '-plugin-arg-complete',
                      '-Xclang', '--db=' + db_path,
                  '-Xclang', '-plugin-arg-complete',
                      '-Xclang', '--source-root=' + source_root
                 ])
  time_start = time.time()
  exit_code = subprocess.call(command)
  time_end = time.time()

  # Log results.
  LogInvocation(
      sys.argv[1:], time_end - time_start, exit_code, db_path, source_root)
  sys.exit(exit_code)
